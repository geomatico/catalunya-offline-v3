{"version":3,"file":"593.js","mappings":"yKACO,MAAMA,UAAsB,KAC/BC,cACIC,SAASC,WACTC,KAAKC,yBAA2B,sBAEpCC,wBAAwBC,GACpB,MAAMH,KAAKI,cAAc,2BAE7BF,gBAAgBG,GACZ,MAAMC,QAAoBN,KAAKO,eAAeF,GAC9C,IAAKC,EACD,MAAM,IAAIE,MAAMR,KAAKC,0BAEzB,MAAMQ,EAAS,CACXC,MAAO,IAEX,IAAK,MAAMC,KAAcL,EAAa,CAClC,MAAMM,EAAO,CACTC,KAAMF,EACNG,WAAYH,EAAWI,aACvBC,SAAUhB,KAAKiB,mBAAmBN,GAClCO,KAAMlB,KAAKmB,eAAeR,GAC1BS,UAAMC,EACNC,KAAMtB,KAAKuB,eAAeZ,KAE1BN,MAAAA,OAAyC,EAASA,EAAQmB,YAC1DZ,EAAKa,WAAazB,KAAK0B,gBAAgBf,IAE3CF,EAAOC,MAAMiB,KAAKf,GAEtB,OAAOH,EAEXP,iBAAiBC,GACb,MAAMH,KAAKI,cAAc,2BAE7BF,gBAAgBC,GACZ,MAAMH,KAAKI,cAAc,2BAE7BF,iBAAiBC,GACb,MAAMH,KAAKI,cAAc,2BAE7BF,qBAAqBG,GACjB,IAAIuB,EACJ,MAAMC,GAAqF,QAA1ED,EAAKvB,MAAAA,OAAyC,EAASA,EAAQyB,aAA0B,IAAPF,OAAgB,EAASA,EAAGG,KAAK,OAAS,GACvIC,KAAc3B,MAAAA,OAAyC,EAASA,EAAQ2B,UAC9E,OAAO,IAAIC,SAAQC,IACf,IAAIC,GAAgB,EACpB,MAAMC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,OACbH,EAAMP,OAASA,EACfO,EAAMJ,SAAWA,EACjBI,EAAMI,iBAAiB,UAAU,KAC7BL,GAAgB,EAChB,MAAMzB,EAAQ+B,MAAMC,KAAKN,EAAM1B,OAAS,IACxCwB,EAAQxB,KACT,CAAEiC,MAAM,IAEXC,OAAOJ,iBAAiB,SAAStC,gBACvBF,KAAK6C,KAAK,KACZV,GAGJD,OAAQb,KACT,CAAEsB,MAAM,IACXP,EAAMU,WAGd5C,sBAAsBU,GAClB,OAAO,IAAIqB,SAAQ,CAACC,EAASa,KACzB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAActC,GACrBoC,EAAOG,OAAS,KACZ,MAEMC,GAFkC,iBAAlBJ,EAAOvC,OAAsBuC,EAAOvC,OAAS,IACrC4C,MAAM,WACN,IAAM,GACpCnB,EAAQkB,IAEZJ,EAAOM,QAAUC,IACbR,EAAOQ,OAInBpC,eAAeP,GACX,OAAOA,EAAKM,KAEhBD,mBAAmBL,GACf,OAAOA,EAAK2B,KAEhBhB,eAAeX,GACX,OAAOA,EAAKU,KAEhBpB,WAAWsD,GACP,OAAO,IAAIvB,SAAQC,GAAWuB,WAAWvB,EAASsB","sources":["webpack://catalunya-offline/./node_modules/@capawesome/capacitor-file-picker/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\r\nexport class FilePickerWeb extends WebPlugin {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.ERROR_PICK_FILE_CANCELED = 'pickFiles canceled.';\r\n    }\r\n    async convertHeicToJpeg(_options) {\r\n        throw this.unimplemented('Not implemented on web.');\r\n    }\r\n    async pickFiles(options) {\r\n        const pickedFiles = await this.openFilePicker(options);\r\n        if (!pickedFiles) {\r\n            throw new Error(this.ERROR_PICK_FILE_CANCELED);\r\n        }\r\n        const result = {\r\n            files: [],\r\n        };\r\n        for (const pickedFile of pickedFiles) {\r\n            const file = {\r\n                blob: pickedFile,\r\n                modifiedAt: pickedFile.lastModified,\r\n                mimeType: this.getMimeTypeFromUrl(pickedFile),\r\n                name: this.getNameFromUrl(pickedFile),\r\n                path: undefined,\r\n                size: this.getSizeFromUrl(pickedFile),\r\n            };\r\n            if (options === null || options === void 0 ? void 0 : options.readData) {\r\n                file.data = await this.getDataFromFile(pickedFile);\r\n            }\r\n            result.files.push(file);\r\n        }\r\n        return result;\r\n    }\r\n    async pickImages(_options) {\r\n        throw this.unimplemented('Not implemented on web.');\r\n    }\r\n    async pickMedia(_options) {\r\n        throw this.unimplemented('Not implemented on web.');\r\n    }\r\n    async pickVideos(_options) {\r\n        throw this.unimplemented('Not implemented on web.');\r\n    }\r\n    async openFilePicker(options) {\r\n        var _a;\r\n        const accept = ((_a = options === null || options === void 0 ? void 0 : options.types) === null || _a === void 0 ? void 0 : _a.join(',')) || '';\r\n        const multiple = !!(options === null || options === void 0 ? void 0 : options.multiple);\r\n        return new Promise(resolve => {\r\n            let onChangeFired = false;\r\n            const input = document.createElement('input');\r\n            input.type = 'file';\r\n            input.accept = accept;\r\n            input.multiple = multiple;\r\n            input.addEventListener('change', () => {\r\n                onChangeFired = true;\r\n                const files = Array.from(input.files || []);\r\n                resolve(files);\r\n            }, { once: true });\r\n            // Workaround to detect when Cancel is selected in the File Selection dialog box.\r\n            window.addEventListener('focus', async () => {\r\n                await this.wait(1000);\r\n                if (onChangeFired) {\r\n                    return;\r\n                }\r\n                resolve(undefined);\r\n            }, { once: true });\r\n            input.click();\r\n        });\r\n    }\r\n    async getDataFromFile(file) {\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => {\r\n                const result = typeof reader.result === 'string' ? reader.result : '';\r\n                const splittedResult = result.split('base64,');\r\n                const base64 = splittedResult[1] || '';\r\n                resolve(base64);\r\n            };\r\n            reader.onerror = error => {\r\n                reject(error);\r\n            };\r\n        });\r\n    }\r\n    getNameFromUrl(file) {\r\n        return file.name;\r\n    }\r\n    getMimeTypeFromUrl(file) {\r\n        return file.type;\r\n    }\r\n    getSizeFromUrl(file) {\r\n        return file.size;\r\n    }\r\n    async wait(delayMs) {\r\n        return new Promise(resolve => setTimeout(resolve, delayMs));\r\n    }\r\n}\r\n//# sourceMappingURL=web.js.map"],"names":["FilePickerWeb","constructor","super","arguments","this","ERROR_PICK_FILE_CANCELED","async","_options","unimplemented","options","pickedFiles","openFilePicker","Error","result","files","pickedFile","file","blob","modifiedAt","lastModified","mimeType","getMimeTypeFromUrl","name","getNameFromUrl","path","undefined","size","getSizeFromUrl","readData","data","getDataFromFile","push","_a","accept","types","join","multiple","Promise","resolve","onChangeFired","input","document","createElement","type","addEventListener","Array","from","once","window","wait","click","reject","reader","FileReader","readAsDataURL","onload","base64","split","onerror","error","delayMs","setTimeout"],"sourceRoot":""}