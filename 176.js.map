{"version":3,"file":"176.js","mappings":"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","sources":["webpack://catalunya-offline/./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","async","undefined","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","req","transaction","objectStore","indexName","index","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","options","entry","dbRequest","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","type","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readDirResult","readdir","files","entryPath","name","stat","deleteFile","rmdir","entries","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","parent","children","pathsA","pathsB","every","value","isPathParent","toObj","toPathComponents","fromObj","updateTime","file","readFile","writeResult","writeFile","contents","filename","str","err","_debug"],"sourceRoot":""}