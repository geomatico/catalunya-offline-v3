{"version":3,"file":"883.js","mappings":"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","sources":["webpack://catalunya-offline/./node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.jeepSqliteElement = null;\n        this.isWebStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n        this.ensureJeepSqliteIsAvailable();\n        this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event) => {\n            this.notifyListeners('sqliteImportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event) => {\n            this.notifyListeners('sqliteExportProgressEvent', event.detail);\n        });\n        if (!this.isWebStoreOpen) {\n            this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n        }\n        return;\n    }\n    async saveToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async echo(options) {\n        this.ensureJeepSqliteIsAvailable();\n        const echoResult = await this.jeepSqliteElement.echo(options);\n        return echoResult;\n    }\n    async createConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.createConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async open(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.open(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async closeConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.closeConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getVersion(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const versionResult = await this.jeepSqliteElement.getVersion(options);\n            return versionResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        this.ensureJeepSqliteIsAvailable();\n        try {\n            console.log(`in web checkConnectionsConsistency: ${JSON.stringify(options)}`);\n            const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n            return consistencyResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async close(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.close(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getTableList(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableListResult = await this.jeepSqliteElement.getTableList(options);\n            return tableListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async execute(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.execute(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async executeSet(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.executeSet(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async run(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const runResult = await this.jeepSqliteElement.run(options);\n            return runResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async query(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const queryResult = await this.jeepSqliteElement.query(options);\n            return queryResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n            return dbExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBOpen(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n            return isDBOpenResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n            return isDatabaseResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTableExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n            return tableExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteDatabase(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isJsonValid(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n            return isJsonValidResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async importFromJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n            return importFromJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async exportToJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n            return exportToJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async createSyncTable(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n            return createSyncTableResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async setSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.setSyncDate(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n            return getSyncDateResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteExportedRows(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteExportedRows(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async addUpgradeStatement(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.addUpgradeStatement(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async copyFromAssets(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.copyFromAssets(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromHTTPRequest(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromHTTPRequest(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getDatabaseList() {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n            return databaseListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    /**\n     * Checks if the `jeep-sqlite` element is present in the DOM.\n     * If it's not in the DOM, this method throws an Error.\n     *\n     * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n     */\n    ensureJeepSqliteIsAvailable() {\n        if (this.jeepSqliteElement === null) {\n            throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n        }\n    }\n    ensureWebstoreIsOpen() {\n        if (!this.isWebStoreOpen) {\n            /**\n             * if (!this.isWebStoreOpen)\n              this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n             */\n            throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n        }\n    }\n    ////////////////////////////////////\n    ////// UNIMPLEMENTED METHODS\n    ////////////////////////////////////\n    async getUrl() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async moveDatabasesAndAddSuffix(options) {\n        console.log('moveDatabasesAndAddSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async clearEncryptionSecret() {\n        console.log('clearEncryptionSecret');\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getNCDatabasePath(options) {\n        console.log('getNCDatabasePath', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createNCConnection(options) {\n        console.log('createNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async closeNCConnection(options) {\n        console.log('closeNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isNCDatabase(options) {\n        console.log('isNCDatabase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["CapacitorSQLiteWeb","constructor","super","arguments","this","jeepSqliteElement","isWebStoreOpen","async","customElements","whenDefined","document","querySelector","ensureJeepSqliteIsAvailable","addEventListener","event","notifyListeners","detail","isStoreOpen","options","ensureWebstoreIsOpen","saveToStore","err","Error","echo","createConnection","open","closeConnection","getVersion","console","log","JSON","stringify","checkConnectionsConsistency","close","getTableList","execute","executeSet","run","query","isDBExists","isDBOpen","isDatabase","isTableExists","deleteDatabase","isJsonValid","importFromJson","exportToJson","createSyncTable","setSyncDate","getSyncDate","deleteExportedRows","addUpgradeStatement","copyFromAssets","getFromHTTPRequest","getDatabaseList","unimplemented"],"sourceRoot":""}