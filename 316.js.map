{"version":3,"file":"316.js","mappings":"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","sources":["webpack://catalunya-offline/./node_modules/jeep-photoviewer/loader/index.js","webpack://catalunya-offline/./node_modules/@capacitor-community/photoviewer/dist/esm/web.js","webpack://catalunya-offline/./node_modules/jeep-photoviewer/dist/esm/loader.js","webpack://catalunya-offline/./node_modules/jeep-photoviewer/dist/esm/index-796ed9f4.js"],"sourcesContent":["\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","import { WebPlugin } from '@capacitor/core';\nimport { defineCustomElements as jeepPhotoviewer } from 'jeep-photoviewer/loader';\nexport class PhotoViewerWeb extends WebPlugin {\n    constructor() {\n        super();\n        this._imageList = [];\n        this._options = {};\n        this._mode = 'one';\n        this._startFrom = 0;\n        this._modeList = ['one', 'gallery', 'slider'];\n        this.jeepPhotoViewerResult = (ev) => {\n            const res = ev.detail;\n            if (res !== null) {\n                this.notifyListeners('jeepCapPhotoViewerExit', res);\n            }\n        };\n        document.addEventListener('jeepPhotoViewerResult', this.jeepPhotoViewerResult, false);\n    }\n    async echo(options) {\n        return options;\n    }\n    async show(options) {\n        var _a;\n        //    return new Promise<capShowResult>( (resolve, reject) => {\n        jeepPhotoviewer(window);\n        if (Object.keys(options).includes('images')) {\n            this._imageList = options.images;\n        }\n        if (Object.keys(options).includes('options')) {\n            this._options = (_a = options.options) !== null && _a !== void 0 ? _a : {};\n        }\n        if (Object.keys(options).includes('mode')) {\n            const mMode = options.mode;\n            if (this._modeList.includes(mMode)) {\n                this._mode = mMode !== null && mMode !== void 0 ? mMode : 'one';\n            }\n        }\n        if (Object.keys(options).includes('startFrom')) {\n            const mStartFrom = options.startFrom;\n            this._startFrom = mStartFrom !== null && mStartFrom !== void 0 ? mStartFrom : 0;\n        }\n        this._photoViewer = document.createElement('jeep-photoviewer');\n        this._photoViewer.imageList = this._imageList;\n        this._photoViewer.mode = this._mode;\n        if (this._mode === 'one' || this._mode === 'slider') {\n            this._photoViewer.startFrom = this._startFrom;\n        }\n        const optionsKeys = Object.keys(this._options);\n        let divid;\n        if (optionsKeys.length > 0) {\n            this._photoViewer.options = this._options;\n            if (optionsKeys.includes('divid')) {\n                divid = this._options.divid;\n            }\n            else {\n                divid = 'photoviewer-container';\n            }\n        }\n        else {\n            divid = 'photoviewer-container';\n        }\n        this._container = document.querySelector(`#${divid}`);\n        // check if already a photoviewer element\n        if (this._container != null) {\n            const isPVEl = this._container.querySelector('jeep-photoviewer');\n            if (isPVEl != null) {\n                this._container.removeChild(isPVEl);\n            }\n            this._container.appendChild(this._photoViewer);\n            await customElements.whenDefined('jeep-photoviewer');\n            return Promise.resolve({ result: true });\n        }\n        else {\n            return Promise.reject(\"Div id='photoviewer-container' not found\");\n        }\n    }\n    async saveImageFromHttpToInternal(options) {\n        console.log('saveImageFromHttpToInternal', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getInternalImagePaths() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map","import { b as bootstrapLazy } from './index-796ed9f4.js';\nexport { s as setNonce } from './index-796ed9f4.js';\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return undefined;\n  return bootstrapLazy([[\"jeep-photo-buttons_6\",[[1,\"jeep-photoviewer\",{\"imageList\":[16],\"options\":[16],\"mode\":[513,\"pvmode\"],\"startFrom\":[514,\"pvstartfrom\"],\"innerImageList\":[32],\"innerOptions\":[32],\"innerMode\":[32],\"innerStartFrom\":[32],\"showHScroll\":[32],\"close\":[32],\"init\":[64],\"closePhotoHScroll\":[64]},[[9,\"resize\",\"handleWindowResize\"],[0,\"jeepPhotoHscrollClose\",\"handleJeepPhotoHscrollClose\"],[0,\"jeepPhotoButtonsClose\",\"handleJeepPhotoButtonsClose\"],[0,\"jeepPhotoHscrollResult\",\"handleJeepPhotoHscrollResult\"]],{\"imageList\":[\"parseImageList\"],\"options\":[\"parseOptions\"],\"mode\":[\"parseMode\"],\"startFrom\":[\"parseStartFrom\"]}],[1,\"jeep-photo-hscroll\",{\"position\":[514,\"selposition\"],\"imageList\":[16],\"options\":[16],\"mode\":[513,\"pvmode\"],\"innerImageList\":[32],\"innerOptions\":[32],\"innerPosition\":[32],\"innerMode\":[32],\"buttonsVisibility\":[32],\"isFullscreen\":[32],\"photoZoom\":[32],\"share\":[32],\"shareShow\":[32],\"titleShow\":[32],\"maxZoomScale\":[32],\"currentIndex\":[32],\"init\":[64],\"setCarousel\":[64]},[[9,\"resize\",\"handleWindowResize\"],[0,\"jeepPhotoButtonsClose\",\"handleJeepPhotoButtonsClose\"],[0,\"jeepPhotoButtonsShare\",\"handleJeepPhotoButtonsShare\"],[0,\"jeepPhotoShareCompleted\",\"handleJeepPhotoShareCompleted\"],[0,\"jeepPhotoRequestFullscreen\",\"handleJeepPhotoFullscreenRequest\"],[0,\"jeepPhotoRequestMinimize\",\"handleJeepPhotoMinimizeRequest\"],[0,\"jeepPhotoZoomOneTap\",\"handleJeepPhotoZoomOneTap\"],[0,\"jeepPhotoSwipe\",\"handleJeepPhotoSwipe\"]],{\"position\":[\"parsePosition\"],\"imageList\":[\"parseImageList\"],\"options\":[\"parseOptions\"],\"mode\":[\"parseMode\"]}],[1,\"jeep-photo-buttons\",{\"share\":[513,\"sharevisible\"],\"viewmode\":[513],\"closebutton\":[513],\"fromcomponent\":[513],\"innerShare\":[32],\"innerViewmode\":[32],\"innerCloseButton\":[32],\"innerFromComponent\":[32],\"visible\":[32],\"mode\":[32],\"init\":[64],\"setPhotoButtons\":[64],\"setJeepPhotoButtonsVisibility\":[64]},null,{\"share\":[\"parseShare\"],\"viewmode\":[\"parseViewmode\"],\"closebutton\":[\"parseCloseButton\"],\"fromcomponent\":[\"parseFromComponent\"]}],[1,\"jeep-photo-share\",{\"surl\":[513],\"stitle\":[513],\"stext\":[513],\"innerUrl\":[32],\"innerTitle\":[32],\"innerText\":[32],\"init\":[64],\"setShare\":[64]},null,{\"surl\":[\"parseUrl\"],\"stitle\":[\"parseTitle\"],\"stext\":[\"parseText\"]}],[1,\"jeep-photo-swipe\",{\"timeThreshold\":[514,\"timethreshold\"],\"thresholdX\":[514,\"thresholdx\"],\"thresholdY\":[514,\"thresholdy\"],\"innerTimeThreshold\":[32],\"innerThresholdX\":[32],\"innerThresholdY\":[32],\"init\":[64],\"handleTouchStart\":[64],\"handleTouchEnd\":[64],\"handleMouseDown\":[64],\"handleMouseUp\":[64]},null,{\"timeThreshold\":[\"parseTimeThreshold\"],\"thresholdX\":[\"parseThresholdX\"],\"thresholdY\":[\"parseThresholdY\"]}],[1,\"jeep-photo-zoom\",{\"url\":[513],\"maxzoomscale\":[514],\"innerUrl\":[32],\"innerMaxZoomScale\":[32],\"init\":[64],\"setPhoto\":[64]},null,{\"url\":[\"parseUrl\"],\"maxzoomscale\":[\"parseMaxZooScale\"]}]]]], options);\n};\n\nexport { defineCustomElements };\n\n//# sourceMappingURL=loader.js.map","const NAMESPACE = 'jeep-photoviewer';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Constant for styles to be globally applied to `slot-fb` elements for pseudo-slot behavior.\n *\n * Two cascading rules must be used instead of a `:not()` selector due to Stencil browser\n * support as of Stencil v4.\n */\nconst SLOT_FB_CSS = 'slot-fb{display:contents}slot-fb[hidden]{display:none}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / className attributes\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                // Add styles for `slot-fb` elements if we're using slots outside the Shadow DOM\n                if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                    styleElm.innerHTML += SLOT_FB_CSS;\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue || newValue) {\n                // Need to account for \"capture\" events.\n                // If the event name ends with \"Capture\", we'll update the name to remove\n                // the \"Capture\" suffix and make sure the event listener is setup to handle the capture event.\n                const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);\n                // Make sure we only replace the last instance of \"Capture\"\n                memberName = memberName.replace(CAPTURE_EVENT_REGEX, '');\n                if (oldValue) {\n                    plt.rel(elm, memberName, oldValue, capture);\n                }\n                if (newValue) {\n                    plt.ael(elm, memberName, newValue, capture);\n                }\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) {\n                    /**\n                     * in case someone tries to set a read-only property, e.g. \"namespaceURI\", we just ignore it\n                     */\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\n/**\n * Parsed a string of classnames into an array\n * @param value className string, e.g. \"foo bar baz\"\n * @returns list of classes, e.g. [\"foo\", \"bar\", \"baz\"]\n */\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst CAPTURE_EVENT_SUFFIX = 'Capture';\nconst CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + '$');\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    // This needs to always happen so we can hide nodes that are projected\n    // to another component but don't end up in a slot\n    elm['s-hn'] = hostTagName;\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            if (elm) {\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n * @param isInitialRender whether or not this is the first render of the vdom\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh, isInitialRender = false) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode, isInitialRender)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode, isInitialRender);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode, isInitialRender)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode, isInitialRender);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode, isInitialRender)) {\n            patch(oldStartVnode, newEndVnode, isInitialRender);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode, isInitialRender)) {\n            patch(oldEndVnode, newStartVnode, isInitialRender);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @param isInitialRender whether or not this is the first render of the vdom\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode, isInitialRender = false) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n * @param isInitialRender whether or not this is the first render of the vdom\n */\nconst patch = (oldVNode, newVNode, isInitialRender = false) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren, isInitialRender);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode, isInitialLoad);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = undefined;\n            }\n        }\n        {\n            // If `componentWillLoad` returns a `Promise` then we want to wait on\n            // whatever's going on in that `Promise` before we launch into\n            // rendering the component, doing other lifecycle stuff, etc. So\n            // in that case we assign the returned promise to the variable we\n            // declared above to hold a possible 'queueing' Promise\n            maybePromise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    try {\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    const prototype = Cstr.prototype;\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        var _a;\n                        const ref = getHostRef(this);\n                        return (_a = ref === null || ref === void 0 ? void 0 : ref.$onInstancePromise$) === null || _a === void 0 ? void 0 : _a.then(() => { var _a; return (_a = ref.$lazyInstance$) === null || _a === void 0 ? void 0 : _a[memberName](...args); });\n                    },\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    var _a;\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (flags &&\n                            !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const instance = hostRef.$lazyInstance$ ;\n                            const entry = (_a = cmpMeta.$watchers$) === null || _a === void 0 ? void 0 : _a[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    var _a;\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                        (_a = cmpMeta.$attrsToReflect$) === null || _a === void 0 ? void 0 : _a.push([propName, attrName]);\n                    }\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n    let Cstr;\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback());\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectInstance = (instance) => {\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance());\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const dataStyles = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    let hasSlotRelocation = false;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            var _a;\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            // Check if we are using slots outside the shadow DOM in this component.\n            // We'll use this information later to add styles for `slot-fb` elements\n            if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                hasSlotRelocation = true;\n            }\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    // Add styles for `slot-fb` elements if any of our components are using slots outside the Shadow DOM\n    if (hasSlotRelocation) {\n        dataStyles.innerHTML += SLOT_FB_CSS;\n    }\n    // Add hydration styles\n    {\n        dataStyles.innerHTML += cmpTags + HYDRATED_CSS;\n    }\n    // If we have styles, add them to the DOM\n    if (dataStyles.innerHTML.length) {\n        dataStyles.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            dataStyles.setAttribute('nonce', nonce);\n        }\n        // Insert the styles into the document head\n        // NOTE: this _needs_ to happen last so we can ensure the nonce (and other attributes) are applied\n        head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target = getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n\n//# sourceMappingURL=index-796ed9f4.js.map"],"names":["window","Reflect","customElements","a","HTMLElement","construct","this","constructor","prototype","Object","setPrototypeOf","PhotoViewerWeb","super","_imageList","_options","_mode","_startFrom","_modeList","jeepPhotoViewerResult","ev","res","detail","notifyListeners","document","addEventListener","echo","options","show","_a","b","keys","includes","images","mMode","mode","mStartFrom","startFrom","_photoViewer","createElement","imageList","optionsKeys","divid","length","_container","querySelector","isPVEl","removeChild","appendChild","whenDefined","Promise","resolve","result","reject","saveImageFromHttpToInternal","console","log","unimplemented","getInternalImagePaths","scopeId","hostTagName","isSvgMode","queuePending","SLOT_FB_CSS","EMPTY_OBJ","isComplexType","o","queryNonceMetaTagContent","doc","_b","_c","head","getAttribute","undefined","h","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","Array","isArray","String","$text$","push","newVNode","classData","className","class","filter","k","join","vnode","$attrs$","$children$","tag","text","$flags$","$tag$","$elm$","Host","getElement","ref","getHostRef","createEvent","name","flags","elm","emit","emitEvent","bubbles","composed","cancelable","opts","plt","ce","dispatchEvent","rootAppliedStyles","WeakMap","getScopeId","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","classList","oldClasses","parseClassList","newClasses","remove","add","prop","style","removeProperty","setProperty","isComplex","tagName","n","e","removeAttribute","setAttribute","slice","win","capture","endsWith","CAPTURE_EVENT_SUFFIX","replace","CAPTURE_EVENT_REGEX","rel","ael","parseClassListRegex","value","split","RegExp","updateElement","oldVnode","newVnode","nodeType","host","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","createTextNode","createElementNS","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","shadowRoot","insertBefore","removeVnodes","index","isSameVnode","leftVNode","rightVNode","isInitialRender","patch","oldVNode","oldChildren","newChildren","oldCh","newCh","node","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","nextSibling","parentNode","updateChildren","textContent","data","attachToAncestor","hostRef","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","writeTask","dispatchHooks","endSchedule","$cmpMeta$","$tagName$","instance","$lazyInstance$","maybePromise","$queuedListeners$","map","methodName","event","safeCall","enqueue","updateComponent","fn","isPromisey","then","async","$hostElement$","endUpdate","rc","cmpMeta","endAttachStyles","styleContainerNode","styles","get","styleElm","appliedStyles","set","Set","has","innerHTML","nonce","$nonce$","adoptedStyleSheets","addStyle","getRootNode","attachStyles","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","renderFnResults","hostElm","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","key","hasAttribute","renderVdom","consoleError","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","namespace","method","arg","proxyComponent","Cstr","$members$","watchers","$watchers$","members","entries","memberFlags","defineProperty","$instanceValues$","newVal","oldVal","propValue","propType","parseFloat","areBothNaN","Number","isNaN","watchMethods","watchMethodName","setValue","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","Map","attributeChangedCallback","attrName","jmp","hasOwnProperty","entry","forEach","callbackName","call","observedAttributes","from","_","m","bootstrapLazy","lazyBundles","cmpTags","exclude","metaCharset","dataStyles","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","$resourcesUrl$","URL","resourcesUrl","baseURI","href","hasSlotRelocation","lazyBundle","compactMeta","$listeners$","HostElement","self","registerHost","attachShadow","connectedCallback","clearTimeout","endConnected","addHostEventListeners","$onReadyPromise$","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","cssText","allowCS","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","registerStyle","schedule","initializeComponent","disconnectedCallback","$rmListeners$","rmListener","componentOnReady","$lazyBundleId$","define","firstChild","setTimeout","listeners","attachParentListeners","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","hostRefs","registerInstance","lazyInstance","hostElement","el","error","cmpModules","hmrVersionId","exportName","bundleId","module","importedModule","raf","requestAnimationFrame","eventName","listener","removeEventListener","CustomEvent","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now","v"],"sourceRoot":""}