{"version":3,"file":"539.js","mappings":"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","sources":["webpack://catalunya-offline/./node_modules/jeep-photoviewer/loader/index.js","webpack://catalunya-offline/./node_modules/@capacitor-community/photoviewer/dist/esm/web.js","webpack://catalunya-offline/./node_modules/jeep-photoviewer/dist/esm/loader.js","webpack://catalunya-offline/./node_modules/jeep-photoviewer/dist/esm/index-cd4cb03d.js"],"sourcesContent":["\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","import { WebPlugin } from '@capacitor/core';\nimport { defineCustomElements as jeepPhotoviewer } from 'jeep-photoviewer/loader';\nexport class PhotoViewerWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this._imageList = [];\n        this._options = {};\n        this._mode = 'one';\n        this._startFrom = 0;\n        this._modeList = ['one', 'gallery', 'slider'];\n    }\n    async echo(options) {\n        return options;\n    }\n    async show(options) {\n        return new Promise((resolve, reject) => {\n            var _a;\n            jeepPhotoviewer(window);\n            if (Object.keys(options).includes('images')) {\n                this._imageList = options.images;\n            }\n            if (Object.keys(options).includes('options')) {\n                this._options = (_a = options.options) !== null && _a !== void 0 ? _a : {};\n            }\n            if (Object.keys(options).includes('mode')) {\n                const mMode = options.mode;\n                if (this._modeList.includes(mMode)) {\n                    this._mode = mMode !== null && mMode !== void 0 ? mMode : 'one';\n                }\n            }\n            if (Object.keys(options).includes('startFrom')) {\n                const mStartFrom = options.startFrom;\n                this._startFrom = mStartFrom !== null && mStartFrom !== void 0 ? mStartFrom : 0;\n            }\n            const photoViewer = document.createElement('jeep-photoviewer');\n            photoViewer.imageList = this._imageList;\n            photoViewer.mode = this._mode;\n            if (this._mode === 'one' || this._mode === 'slider') {\n                photoViewer.startFrom = this._startFrom;\n            }\n            const optionsKeys = Object.keys(this._options);\n            let divid;\n            if (optionsKeys.length > 0) {\n                photoViewer.options = this._options;\n                if (optionsKeys.includes('divid')) {\n                    divid = this._options.divid;\n                }\n                else {\n                    divid = 'photoviewer-container';\n                }\n            }\n            else {\n                divid = 'photoviewer-container';\n            }\n            this._container = document.querySelector(`#${divid}`);\n            // check if already a photoviewer element\n            if (this._container != null) {\n                const isPVEl = this._container.querySelector('jeep-photoviewer');\n                if (isPVEl != null) {\n                    this._container.removeChild(isPVEl);\n                }\n                photoViewer.addEventListener('jeepPhotoViewerResult', async (ev) => {\n                    const res = ev.detail;\n                    if (res === null) {\n                        reject('Error: event does not include detail ');\n                    }\n                    else {\n                        this.notifyListeners('jeepCapPhotoViewerExit', res);\n                        this._container.removeChild(photoViewer);\n                        resolve(res);\n                    }\n                }, false);\n                this._container.appendChild(photoViewer);\n            }\n            else {\n                reject(\"Div id='photoviewer-container' not found\");\n            }\n        });\n    }\n}\n//# sourceMappingURL=web.js.map","import { p as promiseResolve, b as bootstrapLazy } from './index-cd4cb03d.js';\n\n/*\n Stencil Client Patch Esm v2.19.3 | MIT Licensed | https://stenciljs.com\n */\nconst patchEsm = () => {\n    return promiseResolve();\n};\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return Promise.resolve();\n  return patchEsm().then(() => {\n  return bootstrapLazy([[\"jeep-photo-buttons_6\",[[1,\"jeep-photoviewer\",{\"imageList\":[16],\"options\":[16],\"mode\":[513,\"pvmode\"],\"startFrom\":[514,\"pvstartfrom\"],\"innerImageList\":[32],\"innerOptions\":[32],\"innerMode\":[32],\"innerStartFrom\":[32],\"showHScroll\":[32],\"close\":[32],\"init\":[64],\"closePhotoHScroll\":[64]},[[9,\"resize\",\"handleWindowResize\"],[0,\"jeepPhotoHscrollClose\",\"handleJeepPhotoHscrollClose\"],[0,\"jeepPhotoButtonsClose\",\"handleJeepPhotoButtonsClose\"],[0,\"jeepPhotoHscrollResult\",\"handleJeepPhotoHscrollResult\"]]],[1,\"jeep-photo-hscroll\",{\"position\":[514,\"selposition\"],\"imageList\":[16],\"options\":[16],\"mode\":[513,\"pvmode\"],\"innerImageList\":[32],\"innerOptions\":[32],\"innerPosition\":[32],\"innerMode\":[32],\"buttonsVisibility\":[32],\"isFullscreen\":[32],\"photoZoom\":[32],\"share\":[32],\"shareShow\":[32],\"titleShow\":[32],\"maxZoomScale\":[32],\"currentIndex\":[32],\"init\":[64],\"setCarousel\":[64]},[[9,\"resize\",\"handleWindowResize\"],[0,\"jeepPhotoButtonsClose\",\"handleJeepPhotoButtonsClose\"],[0,\"jeepPhotoButtonsShare\",\"handleJeepPhotoButtonsShare\"],[0,\"jeepPhotoShareCompleted\",\"handleJeepPhotoShareCompleted\"],[0,\"jeepPhotoRequestFullscreen\",\"handleJeepPhotoFullscreenRequest\"],[0,\"jeepPhotoRequestMinimize\",\"handleJeepPhotoMinimizeRequest\"],[0,\"jeepPhotoZoomOneTap\",\"handleJeepPhotoZoomOneTap\"],[0,\"jeepPhotoSwipe\",\"handleJeepPhotoSwipe\"]]],[1,\"jeep-photo-buttons\",{\"share\":[513,\"sharevisible\"],\"viewmode\":[513],\"closebutton\":[513],\"fromcomponent\":[513],\"innerShare\":[32],\"innerViewmode\":[32],\"innerCloseButton\":[32],\"innerFromComponent\":[32],\"visible\":[32],\"mode\":[32],\"init\":[64],\"setPhotoButtons\":[64],\"setJeepPhotoButtonsVisibility\":[64]}],[1,\"jeep-photo-share\",{\"surl\":[513],\"stitle\":[513],\"stext\":[513],\"innerUrl\":[32],\"innerTitle\":[32],\"innerText\":[32],\"init\":[64],\"setShare\":[64]}],[1,\"jeep-photo-swipe\",{\"timeThreshold\":[514,\"timethreshold\"],\"thresholdX\":[514,\"thresholdx\"],\"thresholdY\":[514,\"thresholdy\"],\"innerTimeThreshold\":[32],\"innerThresholdX\":[32],\"innerThresholdY\":[32],\"init\":[64],\"handleTouchStart\":[64],\"handleTouchEnd\":[64],\"handleMouseDown\":[64],\"handleMouseUp\":[64]}],[1,\"jeep-photo-zoom\",{\"url\":[513],\"maxzoomscale\":[514],\"innerUrl\":[32],\"innerMaxZoomScale\":[32],\"init\":[64],\"setPhoto\":[64]}]]]], options);\n  });\n};\n\nexport { defineCustomElements };\n","const NAMESPACE = 'jeep-photoviewer';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    return elm;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    if (isInitialLoad) {\n        {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = null;\n            }\n        }\n        {\n            promise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        const ref = getHostRef(this);\n                        return ref.$onInstancePromise$.then(() => ref.$lazyInstance$[memberName](...args));\n                    },\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n        }\n        endConnected();\n    }\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (listeners) {\n        listeners.map(([flags, name, method]) => {\n            const target = getHostListenerTarget(elm, flags) ;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    addHostEventListeners(elm, hostRef, cmpMeta.$listeners$);\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r };\n"],"names":["window","Reflect","customElements","a","HTMLElement","construct","this","constructor","prototype","Object","setPrototypeOf","PhotoViewerWeb","super","arguments","_imageList","_options","_mode","_startFrom","_modeList","async","options","Promise","resolve","reject","_a","win","p","then","b","keys","includes","images","mMode","mode","mStartFrom","startFrom","photoViewer","document","createElement","imageList","optionsKeys","divid","length","_container","querySelector","isPVEl","removeChild","addEventListener","ev","res","detail","notifyListeners","appendChild","scopeId","hostTagName","isSvgMode","queuePending","EMPTY_OBJ","isComplexType","o","h","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","c","i","Array","isArray","String","$text$","push","newVNode","classData","className","class","filter","k","join","vnode","$attrs$","$children$","tag","text","$flags$","$tag$","$elm$","Host","getElement","ref","getHostRef","createEvent","name","flags","elm","emit","emitEvent","bubbles","composed","cancelable","opts","plt","ce","dispatchEvent","rootAppliedStyles","WeakMap","getScopeId","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","toLowerCase","classList","oldClasses","parseClassList","newClasses","remove","add","prop","style","removeProperty","setProperty","isComplex","tagName","n","e","getAttribute","removeAttribute","setAttribute","slice","rel","ael","parseClassListRegex","value","split","updateElement","oldVnode","newVnode","nodeType","host","oldVnodeAttrs","newVnodeAttrs","undefined","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","doc","createTextNode","createElementNS","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","shadowRoot","insertBefore","removeVnodes","isSameVnode","leftVNode","rightVNode","patch","oldVNode","oldChildren","newChildren","oldCh","newCh","node","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","nextSibling","parentNode","updateChildren","textContent","data","attachToAncestor","hostRef","ancestorComponent","$onRenderResolve$","r","scheduleUpdate","isInitialLoad","$ancestorComponent$","writeTask","dispatchHooks","endSchedule","$cmpMeta$","$tagName$","instance","$lazyInstance$","promise","$queuedListeners$","map","methodName","event","safeCall","updateComponent","$hostElement$","endUpdate","rc","cmpMeta","endAttachStyles","styleContainerNode","hostElm","styles","get","head","styleElm","appliedStyles","set","Set","has","innerHTML","adoptedStyleSheets","addStyle","getRootNode","attachStyles","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","all","render","renderFnResults","$vnode$","rootVnode","$attrsToReflect$","propName","attribute","renderVdom","consoleError","addHydratedFlag","$onReadyResolve$","appDidLoad","$onInstanceResolve$","nextTick","who","documentElement","namespace","method","arg","thenFn","proxyComponent","Cstr","$members$","watchers","$watchers$","members","entries","memberFlags","defineProperty","$instanceValues$","newVal","oldVal","propValue","propType","parseFloat","areBothNaN","Number","isNaN","watchMethods","watchMethodName","setValue","configurable","enumerable","args","$onInstancePromise$","attrNameToPropName","Map","attributeChangedCallback","attrName","_oldValue","jmp","hasOwnProperty","observedAttributes","_","m","bootstrapLazy","lazyBundles","cmpTags","exclude","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","assign","$resourcesUrl$","URL","resourcesUrl","baseURI","href","lazyBundle","compactMeta","$listeners$","HostElement","self","registerHost","attachShadow","connectedCallback","clearTimeout","endConnected","addHostEventListeners","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","endRegisterStyles","cssText","allowCS","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","registerStyle","schedule","initializeComponent","disconnectedCallback","$rmListeners$","rmListener","componentOnReady","$onReadyPromise$","$lazyBundleId$","define","firstChild","setTimeout","listeners","attachParentListeners","target","getHostListenerTarget","handler","hostListenerProxy","hostListenerOpts","hostRefs","registerInstance","lazyInstance","el","console","error","cmpModules","exportName","replace","bundleId","module","importedModule","raf","requestAnimationFrame","eventName","listener","removeEventListener","CustomEvent","promiseResolve","v","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","performance","now"],"sourceRoot":""}